mixin Badge(method)
    //- Draw a badge for a given HTTP method
    case method
        when 'GET'
            span.badge.get: i.fa.fa-arrow-down
        when 'HEAD'
            span.badge.head: i.fa.fa-info-circle
        when 'OPTIONS'
            span.badge.options: i.fa.fa-dot-circle-o
        when 'POST'
            span.badge.post: i.fa.fa-plus
        when 'PUT'
            span.badge.put: i.fa.fa-pencil
        when 'PATCH'
            span.badge.patch: i.fa.fa-pencil
        when 'DELETE'
            span.badge.delete: i.fa.fa-times
        default
            span.badge: i.fa.fa-dot-circle-o


// comment status: 0 待解决， 1 暂不解决, 2 已解决
mixin CommentCtrls(action, item)
    .api-comment-ctrls
        if item.status === 'todo'
            //button(type='submit', name='commentId', value='message-' + item.commentId, form='handle-' + action.elementId, title='标记为消息').fa.fa-envelope.api-comment-ctrl
            button(type='submit', name='commentId', value='resolve-' + item.commentId, form='handle-' + action.elementId, title='标记为解决').fa.fa-check.api-comment-ctrl
            button(type='submit', name='commentId', value='reject-' + item.commentId, form='handle-' + action.elementId, title='暂不解决').fa.fa-ban.api-comment-ctrl
        else
            button(type='submit', name='commentId', value='reopen-' + item.commentId, form='handle-' + action.elementId, title='重新打开').fa.fa-bell.api-comment-ctrl
            button(type='submit', name='commentId', value='delete-' + item.commentId, form='handle-' + action.elementId, title='删除评论').fa.fa-remove.api-comment-ctrl

mixin Nav()
    //- Draw a navigation bar, which includes links to individual
    //- resources and actions.
    - var apiCount = 0
    nav
        if self.api.navItems && self.api.navItems.length
            .resource-group
                .heading
                  .chevron
                    i.open.fa.fa-angle-down
                  a(href='#top') Overview
                .collapse-content
                  ul: each item in self.api.navItems
                    li
                      a(href=item[1])!= item[0]
        each resourceGroup in self.api.resourceGroups || []
            .resource-group
                .heading
                  .chevron
                    i.open.fa.fa-angle-down
                  a.api-navResourceGroup(href=resourceGroup.elementLink)!= resourceGroup.name || 'Resource Group'
                .collapse-content
                  ul
                    each item in resourceGroup.navItems || []
                      li
                        a(href=item[1])!= item[0]
                    each resource in resourceGroup.resources || []
                      li
                        if !self.condenseNav || (resource.actions.length != 1)
                            a(href=resource.elementLink)!= resource.name || 'Resource'
                            ul: each action in resource.actions || []
                                li: a.api-elementLink(href=action.elementLink)
                                  +Badge(action.method)
                                  div.api-navURI
                                    span= action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)
                                    code(title=action.uriTemplate).uri= self.trimUri(action.uriTemplate)
                        else
                            - var action = resource.actions[0]
                            - apiCount++
                            a.api-elementLink(href=action.elementLink)
                                +Badge(action.method)
                                div.api-navURI
                                  span
                                    != action.name
                                    if (self.comments[action.elementId] && self.comments[action.elementId].todosCount > 0)
                                        i(style='margin-left:4px;color:#999;').fa.fa-comment
                                  code(title=action.uriTemplate).uri= self.trimUri(action.uriTemplate)
        if (self.apiServer && self.reference)
            p.api-reference
                a(href=self.apiServer + self.reference.url,target="_blank")=self.reference.text
                i.fa.fa-external-link-alt
            span(api_total_count=apiCount)

mixin Parameters(params)
    //- Draw a definition list of parameter names, types, defaults,
    //- examples and descriptions.
    .title
        strong URI Parameters
        .collapse-button.show
            span.close Hide
            span.open Show
    .collapse-content
        dl.inner: each param in params || []
            dt= self.urldec(param.name)
            dd
                code= param.type || 'string'
                | &nbsp;
                if param.required
                    span.required (required)
                else
                    span (optional)
                | &nbsp;
                if param.default
                    span.text-info.default
                        strong Default:&nbsp;
                        span= param.default
                    | &nbsp;
                if param.example
                    span.text-muted.example
                        strong Example:&nbsp;
                        span= param.example
                != self.markdown(param.description)
                if param.values.length
                    p.choices
                        strong Choices:&nbsp;
                        each value in param.values
                            code= self.urldec(value.value)
                            = ' '

mixin RequestResponse(title, request, collapse)
    .title
        strong
            = title
            if request.name
                | &nbsp;&nbsp;
                code= request.name
        if collapse && request.hasContent
            .collapse-button
                span.close Hide
                span.open Show
    +RequestResponseBody(request, collapse)

mixin RequestResponseBody(request, collapse, showBlank)
    if request.hasContent || showBlank
        div(class=collapse ? 'collapse-content' : ''): .inner
            if request.description
                .description!= self.markdown(request.description)

            if Object.keys(request.headers).length
                h5 Headers
                pre: code
                    each item, index in request.headers
                        != self.highlight(item.name + ': ' + item.value, 'http')
                        if index < request.headers.length - 1
                          br
                div(style="height: 1px;")
            if request.body
                h5 Body
                pre: code
                    != self.highlight(request.body, null, ['json', 'yaml', 'xml', 'javascript'])
                div(style="height: 1px;")
            if request.schema
                h5 Schema
                pre: code
                    != self.highlight(request.schema, null, ['json', 'yaml', 'xml'])
                div(style="height: 1px;")
            if !request.hasContent
                .description.text-muted This response has no content.
                div(style="height: 1px;")

mixin Examples(resourceGroup, resource, action)
    each example in action.examples
        each request in example.requests
            +RequestResponse('Request', request, true)
        each response in example.responses
            +RequestResponse('Response', response, true)

mixin Content()
    //- Page header and API description
    header
        h1#top!= self.api.name || 'API Documentation'

    if self.api.descriptionHtml
        != self.api.descriptionHtml

    //- Loop through and display information about all the resource
    //- groups, resources, and actions.
    each resourceGroup in self.api.resourceGroups || []
        section.resource-group(id=resourceGroup.elementId)
            h2.group-heading
                != resourceGroup.name || 'Resource Group'
                = " "
                a.permalink(href=resourceGroup.elementLink) &para;
            if resourceGroup.descriptionHtml
                != resourceGroup.descriptionHtml

            each resource in resourceGroup.resources || []
                .resource(id=resource.elementId)
                    h3.resource-heading
                        != resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource'
                        = " "
                        a.permalink(href=resource.elementLink) &nbsp;&para;
                    if resource.description
                        != self.markdown(resource.description)

                    - var PREFIX = self.getPrefix(self.api.metadata)
                    each action in resource.actions || []
                        .action(class=action.methodLower, id=action.elementId)
                            h4.action-heading
                                .name!= action.name
                                a.method(class=action.methodLower, href=action.elementLink)
                                    = action.method
                                if PREFIX
                                  code.uri
                                    span.api-prefix=PREFIX
                                    !=self.urldec(action.uriTemplate)
                                else
                                  code.uri=self.urldec(action.uriTemplate)
                            if action.description
                                != self.markdown(action.description)

                            h4 Example URI
                            .definition
                                span.method(class=action.methodLower)= action.method
                                | &nbsp;
                                span.uri
                                  span.hostname= self.api.host
                                  != action.colorizedUriTemplate

                            //- A list of sub-sections for parameters, requests
                            //- and responses.
                            if action.parameters.length
                                +Parameters(action.parameters)
                            if action.examples
                                +Examples(resourceGroup, resource, action)
                        - var cmtInfo = self.comments[action.elementId]
                        if cmtInfo && cmtInfo.comments.length
                            - var comments = cmtInfo.comments
                            - var commentStatus = {todo:'<span class="api-status api-status-todo">待处理</span>', resolved:'<span class="api-status api-status-resolved">已解决</span>', postponed:'<span class="api-status api-status-postponed">暂不解决</span>', message: ''}
                            .api-comments
                                each item in comments
                                    .api-comment
                                      +CommentCtrls(action, item)
                                      !=self.markdown(item.comment + '<span class="api-timestamp">' + item.timestamp + '</span>' + commentStatus[item.status])
                        .api-feedback
                          .api-feedback-title
                            span.api-title
                              !='『 '+ action.name +' 』接口的有关问题，可以在这里评论'
                              a(href=self.apiServer + self.reference.url,target="_blank",style="margin-left:8px;")='Markdown语法'
                            span.api-ctrl
                              i.fa.fa-comment
                              != '评论'
                          form(id='post-' + action.elementId, action='/comments', method='post').api-feedback-form
                            input(type='hidden', name='page', value=self.page)
                            input(type='hidden', name='elementId', value=action.elementId)
                            textarea(autocomplete='off', required, name='comment').api-textarea
                            .api-buttons
                              button(type='submit', id='btn_post-' + action.elementId)='提交评论'
                          form(id='handle-' + action.elementId, action='/comments/handle', method='post')
                            input(type='hidden', name='page', value=self.page)
                            input(type='hidden', name='elementId', value=action.elementId)




